export function autocomplete(data, arg) {
	return [
		"--unclickable",
		"--rainbow",
		"--undocumented",
		"--prototype",
		"--dev",
		"--reality",
	];

}

/** @param {NS} ns */
export async function main(ns) {
	let opt = ns.flags([
		["unclickable", false],
		["rainbow", false],
		["undocumented", false],
		["prototype", false],
		["dev", false],
		["reality", false],
		["bypass", false],
	]);

	/* TODO figure this one out */
	const unclickableExploit = async () => {
		const div = window.document.getElementById("unclickable");

		const original = {
			getComputedStyle: window.getComputedStyle,
		};

		window.getComputedStyle = function(e, p) {
			if(e.id == "unclickable") {
				return {
					display: "none",
					visibility: "hidden",
				};
			} else {
				return original.getComputedStyle(e, p);
			}
		}

		div.style.visibility = "visible";
		div.style.display = "block";
		//div.role = "button";
		//const clickfunc = () => {console.log('clicked!')};
		//div.setAttribute("onclick", 'clickfunc();');

		div.style.backgroundColor = "white";
		div.style.zIndex = 0xfffff;
		div.style.position = "absolute";

		await ns.sleep(10*1000);

		div.style.visibility = "hidden";

		window.getComputedStyle = original.getComputedStyle;
	}

	const devExploit = async () => {
		window.process = {};
		window.process.env = {};
		window.process.env.NODE_ENV = "development";

		while(1) {
			await ns.sleep(1000);
		}
	}

	const rainbowExploit = () => {
		/* $2a$10$aertxDEkgor8baVtQDZsLuMwwGYmkRM/ohcA6FjmmzIHQeTCsrCcO:noodles*/
		ns.rainbow("noodles");
	}

	const prototypeTampering = async () => {
		let a = 0x4a4a42;

		const origToExponential = a.__proto__.toExponential;

		a.__proto__.toExponential = () => "4a4a42";

		/* Wait 15 minutes + 500 ms */
		await ns.sleep((15 * 60*1000) + 500);

		a.__proto__.toExponential = origToExponential
	}

	const reality = () => {
		let x = false;

		console.log(`x = ${x}`);
		//window.x = true;
		//ns.alterReality();
	}

	switch(true) {
		case opt["prototype"]:
			ns.tprint(`Executing prototype tampering exploit`);
			await prototypeTampering();
			break;
		case opt["unclickable"]:
			ns.tprint(`Executing 'unclickable' exploit`);
			await unclickableExploit();
			break;
		case opt["rainbow"]:
			ns.tprint(`Executing 'rainbow' exploit`);
			rainbowExploit();
			break;
		case opt["dev"]:
			ns.tprint(`Executing 'dev' exploit`);
			await devExploit();
		case opt["undocumented"]:
			ns.exploit();
		case opt["reality"]:
			window.x = true;
			reality();
		default:
			break;
	}
}

export function autocomplete(data, arg) {
	return [
		"--unclickable",
		"--rainbow",
		"--undocumented",
		"--prototype",
		"--dev",
		"--reality",
	];
}

const getRouter = () => {

};

/** @param {NS} ns */
export async function main(ns) {
	let opt = ns.flags([
		["unclickable", false],
		["rainbow", false],
		["undocumented", false],
		["prototype", false],
		["dev", false],
		["reality", false],
		["bypass", false],
	]);

	const unclickableExploit = async () => {
		const div = eval('document').getElementById("unclickable");

		div.style.visibility = "visible";
		div.style.display = "block";

		div.style.backgroundColor = "white";
		div.style.zIndex = 0xfffff;
		div.style.position = "absolute";

		div.parentElement.addEventListener('click', () => {
			div.style.visibility = "hidden";
			div.style.display = "none";
		});
	}

	const devExploit = async () => {
		/*TODO*/
		/* We need to find the router object somehow and call toDevMenu() */
	}

	const rainbowExploit = () => {
		/* $2a$10$aertxDEkgor8baVtQDZsLuMwwGYmkRM/ohcA6FjmmzIHQeTCsrCcO:noodles */
		ns.rainbow("noodles");
	}

	const prototypeTampering = async () => {
		let a = 0x4a4a42;

		const origToExponential = a.__proto__.toExponential;

		a.__proto__.toExponential = () => "4a4a42";

		/* Wait 15 minutes + 500 ms */
		await ns.sleep((15 * 60*1000) + 500);

		a.__proto__.toExponential = origToExponential
	}

	const reality = () => {
		/*TODO*/
		/* Find the function alterReality() in main.bundle.js and change the variable 'e' from '!1' to '1' (textual).
		 * Search for the string "alterReality:()=>()=>{let e=!1;".
		 * Note that 'e' might be any character but it most likely will be a single character */
	}

	switch(true) {
		case opt["prototype"]:
			ns.tprint(`Executing prototype tampering exploit`);
			await prototypeTampering();
			break;
		case opt["unclickable"]:
			ns.tprint(`Executing 'unclickable' exploit`);
			await unclickableExploit();
			break;
		case opt["rainbow"]:
			ns.tprint(`Executing 'rainbow' exploit`);
			rainbowExploit();
			break;
		case opt["dev"]:
			ns.tprint(`Executing 'dev' exploit`);
			await devExploit();
			break;
		case opt["undocumented"]:
			ns.exploit();
			break;
		case opt["reality"]:
			break;
		case opt["bypass"]:
			ns.bypass(eval("document"));
			break;
		default:
			break;
	}
}
